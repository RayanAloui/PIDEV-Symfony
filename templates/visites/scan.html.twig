{% extends 'front.html.twig' %}

{% block title %}Scanner une visite{% endblock %}

{% block body %}
<div class="scanner-container text-center" style="height: 80vh; display: flex; flex-direction: column; justify-content: center;">
    <h1 class="mb-4">Scanner le QR Code</h1>
    
    <div id="scanner-wrapper" style="width: 100%; max-width: 400px; margin: 0 auto;">
        <video id="camera" style="width: 100%; border: 2px solid #333;"></video>
        <div id="scan-result" class="alert mt-3" style="display: none;"></div>
        <div id="error-message" class="alert alert-danger mt-3" style="display: none;"></div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('camera');
    const resultDiv = document.getElementById('scan-result');
    const errorDiv = document.getElementById('error-message');
    let scanning = true;

    navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: "environment", width: { ideal: 1280 }, height: { ideal: 720 } } 
    })
    .then(stream => {
        video.srcObject = stream;
        video.play();
        video.onplaying = () => initScanner();
    })
    .catch(err => showError("Erreur d'accès à la caméra: " + err.message));

    function showError(message) {
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
    }

    function initScanner() {
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        function scan() {
            if (!scanning) return;

            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height);

                if (code) {
                    scanning = false;
                    processScan(code.data);
                }
            }

            requestAnimationFrame(scan);
        }

        function processScan(visiteId) {
            fetch("{{ path('visite_scan') }}", {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ visite_id: visiteId })
            })
            .then(response => response.json())
            .then(data => {
                resultDiv.textContent = data.message;
                resultDiv.style.display = 'block';
                resultDiv.className = `alert mt-3 alert-${data.status === 'success' ? 'success' : 'danger'}`;

                if (data.status === 'success') {
                    video.style.display = 'none';
                    setTimeout(() => {
                        window.location.href = "{{ path('afficher_visite') }}";
                    }, 3000);
                } else {
                    scanning = true;
                }
            })
            .catch(err => {
                showError("Erreur de traitement: " + err.message);
                scanning = true;
            });
        }

        scan();
    }
});
</script>
{% endblock %}
