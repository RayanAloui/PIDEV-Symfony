{% extends 'donate.html.twig' %}

{% block title %}Faire Un Don | OrphanCare{% endblock %}

{% block css %}
    {{ parent() }}
    <style>
        .don-form-container {
            max-width: 900px;
            margin: 40px auto;
            padding: 30px;
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }

        .don-form-container h2 {
            text-align: center;
            margin-bottom: 30px;
            color: #4a2c2a;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            font-weight: 600;
            color: #5a3e36;
        }

        .form-control {
            border-radius: 6px;
            padding: 10px;
            border: 1px solid #ced4da;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
        }

        .invalid-feedback {
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;
        }

        .btn-custom {
            background-color: #b08968;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .btn-custom:hover {
            background-color: #8b5e3c;
        }

        .btn-link {
            display: inline-block;
            margin-top: 15px;
            color: #5a3e36;
            text-decoration: none;
        }

        .btn-link:hover {
            text-decoration: underline;
        }
                .chatbot-float {
            position: fixed;
            bottom: 30px;
            left: 30px;
            width: 60px;
            height: 60px;
            background-color: #b08968;
            color: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            cursor: pointer;
            z-index: 999;
            transition: all 0.3s ease;
        }

        .chatbot-float:hover {
            background-color: #8b5e3c;
            transform: scale(1.1);
        }

        .chatbot-float i {
            font-size: 24px;
        }

        .chatbot-container {
            position: fixed;
            bottom: 100px;
            left: 30px;
            width: 350px;
            height: 500px;
            background-color: white;
            border-radius: 15px;
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
            display: none;
            flex-direction: column;
            z-index: 1000;
            overflow: hidden;
        }

        .chatbot-header {
            background-color: #b08968;
            color: white;
            padding: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chatbot-header h3 {
            margin: 0;
            font-size: 18px;
        }

        .close-chat {
            background: none;
            border: none;
            color: white;
            font-size: 20px;
            cursor: pointer;
        }

        .chatbot-messages {
            flex: 1;
            padding: 15px;
            overflow-y: auto;
        }

        .message {
            margin: 10px 0;
            padding: 8px 12px;
            border-radius: 8px;
            max-width: 80%;
        }

        .user-message {
            background-color: #e6f7ff;
            margin-left: auto;
            text-align: right;
        }

        .bot-message {
            background-color: #f0f0f0;
            margin-right: auto;
        }

        .chatbot-input {
            display: flex;
            padding: 10px;
            border-top: 1px solid #eee;
        }

        .chatbot-input input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 10px;
        }

        .chatbot-input button {
            background-color: #b08968;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 15px;
            cursor: pointer;
        }

        .chatbot-input button:hover {
            background-color: #8b5e3c;
        }
    </style>
{% endblock %}

{% block body %}
    {{ block('bar') }}
    {{ block('navbar') }}
    {{ block('carousel') }}
    
    <div class="don-form-container">
        <h2>Faire Un Don</h2>

        {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
            <div class="form-group">
                {{ form_label(form.montant, "Montant du Don") }}
                {{ form_widget(form.montant, {
                    'attr': {
                        'class': 'form-control ' ~ (form.montant.vars.valid ? '' : 'is-invalid')
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.montant) }}
                </div>
            </div>
            
            <div class="form-group">
                {{ form_label(form.description, "Description") }}
                {{ form_widget(form.description, {
                    'attr': {
                        'class': 'form-control ' ~ (form.description.vars.valid ? '' : 'is-invalid')
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.description) }}
                </div>
            </div>
            
            <div class="form-group">
                {{ form_label(form.typeDon, "Type de Don") }}
                {{ form_widget(form.typeDon, {
                    'attr': {
                        'class': 'form-control ' ~ (form.typeDon.vars.valid ? '' : 'is-invalid'),
                        'style': 'height: 48px; font-size: 16px;'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.typeDon) }}
                </div>
            </div>
            
            <div class="form-group">
                {{ form_label(form.dateDon, "Date du Don") }}
                {{ form_widget(form.dateDon, {
                    'attr': {
                        'class': 'form-control ' ~ (form.dateDon.vars.valid ? '' : 'is-invalid')
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.dateDon) }}
                </div>
            </div>
            
            <div class="form-group">
                {{ form_label(form.idEvent, "Événement Associé") }}
                {{ form_widget(form.idEvent, {
                    'attr': {
                        'class': 'form-control ' ~ (form.idEvent.vars.valid ? '' : 'is-invalid'),
                        'style': 'height: 48px; font-size: 16px;'
                    }
                }) }}
                <div class="invalid-feedback">
                    {{ form_errors(form.idEvent) }}
                </div>
            </div>

            <button type="submit" class="btn btn-custom">Enregistrer</button>
        {{ form_end(form) }}

        <a href="{{ path('app_crud_dons') }}" class="btn-link">← Retour à la liste</a>
    </div>

    <div class="chatbot-float" id="chatbot-button">
        <i class="fas fa-robot"></i>
    </div>

    <div class="chatbot-container" id="chatbot-container">
        <div class="chatbot-header">
            <h3>OrphanCare Assistant</h3>
            <button class="close-chat" id="close-chat">&times;</button>
        </div>
        <div class="chatbot-messages" id="chatbot-messages">
            <div class="message bot-message">
                Bonjour! Comment puis-je vous aider aujourd'hui?
            </div>
        </div>
        <div class="chatbot-input">
            <input type="text" id="user-input" placeholder="Écrivez votre message...">
            <button id="send-button">Envoyer</button>
        </div>
    </div>
    
    {{ block('footer') }}


    <script>
         document.addEventListener('DOMContentLoaded', function() {
            const chatbotButton = document.getElementById('chatbot-button');
            const chatbotContainer = document.getElementById('chatbot-container');
            const closeChat = document.getElementById('close-chat');
            const sendButton = document.getElementById('send-button');
            const userInput = document.getElementById('user-input');
            const messagesContainer = document.getElementById('chatbot-messages');
            
            // API Gemini key
            const API_KEY = 'AIzaSyCMmaP4ZJQiR1eARtoJ5m2QbmNAlJyaVbQ';
            
            // Questions et réponses prédéfinies pour des réponses plus rapides
            const predefinedQA = {
                "bonjour": "Bonjour ! Je suis l'assistant virtuel d'OrphanCare. Comment puis-je vous aider aujourd'hui ?",
                "salut": "Bonjour ! Je suis l'assistant virtuel d'OrphanCare. Comment puis-je vous aider aujourd'hui ?",
                "comment faire un don?": "Vous pouvez faire un don en remplissant le formulaire sur cette page. Nous acceptons différents types de dons (financiers, matériels ou en nature), et vous pouvez les associer à un événement spécifique si vous le souhaitez.",
                "quels types de dons acceptez-vous?": "Nous acceptons trois types de dons :\n- Financiers : par virement, chèque ou carte bancaire\n- Matériels : vêtements, jouets, équipements scolaires\n- En nature : nourriture, médicaments ou services bénévoles",
                "où va mon argent?": "Tous les dons sont utilisés pour aider les orphelins pris en charge par OrphanCare. Les fonds servent à l'éducation (30%), la santé (25%), la nourriture (25%) et le logement (20%).",
                "est-ce que mon don est déductible d'impôts?": "Oui, tous les dons à OrphanCare sont déductibles d'impôts à hauteur de 66% dans la limite de 20% de votre revenu imposable. Vous recevrez automatiquement un reçu fiscal après votre don.",
                "qui est orphancare?": "OrphanCare est une organisation à but non lucratif créée en 2025 par des Etudiant à ESPRIT, dédiée à l'assistance des orphelins. Notre mission est de fournir éducation, soins de santé et logement aux enfants sans famille."
            };
            
            // Instructions de contexte pour l'API Gemini
            const contextInstructions = `Tu es l'assistant virtuel d'OrphanCare, une organisation qui aide les orphelins.
                Réponds toujours avec politesse et précision.
                
                Informations sur OrphanCare:
                - Organisation à but non lucratif créée en 2010
                - Mission: aider les orphelins en fournissant éducation, soins de santé et logement
                - Activités: programmes éducatifs, soins médicaux, aide psychologique, et logement
                - Les dons sont utilisés pour les besoins essentiels des enfants
                - Les dons sont déductibles d'impôts à 66%
                - Possibilité de faire des dons financiers, matériels ou en nature
                - Site web: www.orphancare.org
                
                Informations sur les dons:
                - Types de dons: financiers, matériels, ou en nature
                - Les dons peuvent être ponctuels ou mensuels
                - Possibilité d'associer un don à un événement spécifique
                - Chaque don aide directement un enfant dans le besoin
                
                Si tu ne connais pas la réponse à une question spécifique sur OrphanCare,
                suggère de contacter directement l'équipe à contact@orphancare.org.
                
                Garde tes réponses concises et personnalisées.
                
                N'hésite pas à suggérer à l'utilisateur de remplir le formulaire de don s'il montre un intérêt pour aider.`;
            
            // Toggle chatbot visibility
            chatbotButton.addEventListener('click', function() {
                chatbotContainer.style.display = 'flex';
                chatbotButton.style.display = 'none';
            });
            
            // Close chatbot
            closeChat.addEventListener('click', function() {
                chatbotContainer.style.display = 'none';
                chatbotButton.style.display = 'flex';
            });
            
            // Send message when enter key is pressed
            userInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Send message when button is clicked
            sendButton.addEventListener('click', sendMessage);
            
            // Suggestions rapides après l'accueil
            setTimeout(() => {
                addSuggestions([
                    "Comment faire un don?",
                    "Qui est OrphanCare?",
                    "Où va mon argent?"
                ]);
            }, 1000);
            
            function addSuggestions(suggestions) {
                const suggestionsDiv = document.createElement('div');
                suggestionsDiv.className = 'suggestions';
                suggestionsDiv.innerHTML = '<p>Questions fréquentes :</p>';
                
                suggestions.forEach(suggestion => {
                    const btn = document.createElement('button');
                    btn.className = 'suggestion-btn';
                    btn.textContent = suggestion;
                    btn.addEventListener('click', () => {
                        userInput.value = suggestion;
                        sendMessage();
                    });
                    suggestionsDiv.appendChild(btn);
                });
                
                messagesContainer.appendChild(suggestionsDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            async function sendMessage() {
                const message = userInput.value.trim();
                if (!message) return;
                
                // Add user message to chat
                addMessage(message, 'user-message');
                userInput.value = '';
                
                // Vérifier si la question est dans les réponses prédéfinies
                const normalizedQuestion = message.toLowerCase().trim();
                
                if (predefinedQA[normalizedQuestion]) {
                    // Ajouter un petit délai pour simuler la réflexion
                    const typingIndicator = document.createElement('div');
                    typingIndicator.className = 'message bot-message';
                    typingIndicator.id = 'typing-indicator';
                    typingIndicator.textContent = 'En train de réfléchir...';
                    messagesContainer.appendChild(typingIndicator);
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    
                    // Répondre avec la réponse prédéfinie après un court délai
                    setTimeout(() => {
                        // Remove typing indicator
                        const indicator = document.getElementById('typing-indicator');
                        if (indicator) {
                            indicator.remove();
                        }
                        
                        addMessage(predefinedQA[normalizedQuestion], 'bot-message');
                        
                        // Ajouter des suggestions après certaines réponses
                        if (normalizedQuestion === "bonjour" || normalizedQuestion === "salut") {
                            setTimeout(() => {
                                addSuggestions([
                                    "Comment faire un don?",
                                    "Quels types de dons acceptez-vous?",
                                    "Est-ce que mon don est déductible d'impôts?"
                                ]);
                            }, 500);
                        }
                    }, 1000);
                    
                    return;
                }
                
                // Add "typing" indicator
                const typingIndicator = document.createElement('div');
                typingIndicator.className = 'message bot-message';
                typingIndicator.id = 'typing-indicator';
                typingIndicator.textContent = 'En train de réfléchir...';
                messagesContainer.appendChild(typingIndicator);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Call Gemini API with context instructions
                try {
                    const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key=${API_KEY}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            contents: [
                                {
                                    role: "system",
                                    parts: [{ text: contextInstructions }]
                                },
                                {
                                    role: "user",
                                    parts: [{ text: message }]
                                }
                            ]
                        })
                    });
                    
                    const data = await response.json();
                    
                    // Remove typing indicator
                    const indicator = document.getElementById('typing-indicator');
                    if (indicator) {
                        indicator.remove();
                    }
                    
                    // Process and display response
                    if (data && data.candidates && data.candidates.length > 0 && 
                        data.candidates[0].content && data.candidates[0].content.parts && 
                        data.candidates[0].content.parts.length > 0) {
                        
                        const botResponse = data.candidates[0].content.parts[0].text;
                        addMessage(botResponse, 'bot-message');
                    } else if (data && data.error) {
                        addMessage(`Erreur: ${data.error.message || 'Une erreur est survenue'}`, 'bot-message');
                    } else {
                        addMessage("Désolé, je n'ai pas pu générer une réponse. Veuillez réessayer.", 'bot-message');
                    }
                    
                } catch (error) {
                    // Remove typing indicator
                    const indicator = document.getElementById('typing-indicator');
                    if (indicator) {
                        indicator.remove();
                    }
                    
                    addMessage(`Erreur: ${error.message || 'Une erreur est survenue lors de la communication avec l\'API'}`, 'bot-message');
                }
            }
            
            function addMessage(text, className) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${className}`;
                messageDiv.innerHTML = text.replace(/\n/g, '<br>');
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
        });
    </script>
{% endblock %}