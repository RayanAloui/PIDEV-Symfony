{% extends 'base.html.twig' %}

{% block title %}Activité Index{% endblock %}

{% block body %}
    <style>
        /* General page styling */
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f8f2e3; /* Light beige background */
            margin: 0;
            padding: 0;
            color: #3e2a47; /* Dark brown text */
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        /* Page title styling */
        .page-title {
            font-size: 2.5rem;
            color: #6f4f28; /* Warm brown */
            text-align: center;
            margin-bottom: 20px;
        }

        /* Chart Container Styling */
        .chart-container {
            max-width: 400px; /* Réduit pour un graphique plus petit */
            margin: 20px auto;
            padding: 15px;
            background-color: #f2e3d5; /* Light tan background */
            border-radius: 8px;
            text-align: center;
        }

        .chart-container h3 {
            font-size: 1.2rem; /* Titre plus petit */
            color: #6f4f28; /* Warm brown */
            margin-bottom: 15px;
        }

        /* Table Styling */
        .table-container {
            width: 100%;
            overflow-x: auto;
            min-height: 200px; /* Ensure space for loading indicator */
            position: relative; /* For positioning loading indicator */
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            border-radius: 8px;
            overflow: hidden;
        }

        .table th,
        .table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #d7c6b7; /* Light brown border */
        }

        .table th {
            background-color: #c29c6e; /* Warm gold */
            color: white;
        }

        .table tr:hover {
            background-color: #f2e3d5; /* Light tan */
        }

        /* Action Button Styling */
        .btn-action {
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.9rem;
            text-decoration: none;
            margin: 2px;
            display: inline-block;
            cursor: pointer;
            border: none;
        }

        .btn-show {
            background-color: #9e7b5e; /* Darker brown */
            color: white;
        }

        .btn-show:hover {
            background-color: #7c5c42;
        }

        .btn-edit {
            background-color: #a88f5b; /* Warm light brown */
            color: white;
        }

        .btn-edit:hover {
            background-color: #8f6c47;
        }

        .btn-danger {
            background-color: #b7472a; /* Red-brown */
            color: white;
        }

        .btn-danger:hover {
            background-color: #9a3d22;
        }

        .btn-success {
            background-color: #7b9f6f; /* Olive green-brown */
            color: white;
        }

        .btn-success:hover {
            background-color: #6c8d5f;
        }

        .btn-warning {
            background-color: #d4b25e; /* Light yellow-brown */
            color: white;
        }

        .btn-warning:hover {
            background-color: #c0a254;
        }

        .btn-primary {
            background-color: #568bb7; /* Blue */
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            text-decoration: none;
            margin: 5px;
            display: inline-block;
        }

        .btn-primary:hover {
            background-color: #3e6d94;
        }

        /* Create New Button */
        .btn-create {
            display: inline-block;
            padding: 10px 20px;
            background-color: #6f4f28; /* Deep brown */
            color: white;
            border-radius: 5px;
            text-decoration: none;
            font-size: 1.1rem;
            margin-top: 20px;
            text-align: center;
        }

        .btn-create:hover {
            background-color: #4a3423; /* Darker brown */
        }

        /* Empty state */
        .no-records {
            text-align: center;
            padding: 20px;
            font-size: 1.2rem;
            color: #a88f5b; /* Light brown */
        }

        /* Sort and Search Section */
        .sort-search-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            gap: 10px;
        }

        .sort-by {
            font-size: 1rem;
            flex: 0 0 auto;
        }

        .sort-by select {
            padding: 8px;
            border-radius: 5px;
            font-size: 1rem;
            border: 1px solid #ccc;
        }

        .search-bar {
            flex: 0 1 300px;
            position: relative;
        }

        .search-bar input {
            padding: 8px;
            border-radius: 5px;
            font-size: 1rem;
            border: 1px solid #ccc;
            width: 100%;
        }

        .search-bar button {
            padding: 8px 12px;
            border-radius: 0 5px 5px 0;
            background-color: #6f4f28;
            color: white;
            border: none;
            cursor: pointer;
            position: absolute;
            right: 0;
            top: 0;
            height: 100%;
        }

        .search-bar button:hover {
            background-color: #4a3423;
        }

        .export-button {
            flex: 0 0 auto;
        }

        /* Loading and error states */
        .loading, .error {
            text-align: center;
            padding: 40px 20px;
            font-size: 1.2rem;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.9);
            border-radius: 8px;
            z-index: 10;
            width: 80%;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }

        .loading {
            color: #6f4f28; /* Deep brown */
        }

        .error {
            color: #b7472a; /* Red-brown */
        }

        /* Loading animation */
        @keyframes pulse {
            0% { opacity: 0.6; }
            50% { opacity: 1; }
            100% { opacity: 0.6; }
        }

        .loading {
            animation: pulse 1.5s infinite ease-in-out;
        }

        /* Spinner animation */
        .loading::after {
            content: "";
            display: block;
            width: 30px;
            height: 30px;
            margin: 10px auto 0;
            border: 4px solid #6f4f28;
            border-top: 4px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Highlight search results */
        .highlight {
            background-color: #ffe3a3;
            padding: 2px;
            border-radius: 3px;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .sort-search-container {
                flex-direction: column;
                align-items: stretch;
            }
            
            .search-bar {
                flex: 1 1 100%;
                margin-top: 10px;
            }
            
            .export-button {
                margin-top: 10px;
                text-align: center;
            }
        }
    </style>

    <div class="container">
        <h1 class="page-title">Activités</h1>

        <!-- Sort and Search Section -->
        <div class="sort-search-container">
            <!-- Sort By Dropdown -->
            <div class="sort-by">
                <label for="sort">Sort by:</label>
                <select id="sort" name="sort">
                    <option value="" {% if sort is empty %}selected{% endif %}></option>
                    <option value="categorie" {% if sort == 'categorie' %}selected{% endif %}>Category</option>
                    <option value="duree" {% if sort == 'duree' %}selected{% endif %}>Duree</option>
                    <option value="date" {% if sort == 'date' %}selected{% endif %}>Date</option>
                    <option value="nom" {% if sort == 'nom' %}selected{% endif %}>Nom</option>
                </select>
            </div>

            <!-- Search Bar -->
            <div class="search-bar">
                <input type="text" id="search-input" name="search" placeholder="Search..." value="{{ search }}">
                <button type="button" id="search-button">
                    <i class="fas fa-search"></i> Search
                </button>
            </div>

            <!-- Export Button -->
            <div class="export-button">
                <a href="{{ path('app_activite_export_all_pdf') }}" class="btn-primary">
                    <i class="fas fa-file-pdf"></i> Exporter en PDF
                </a>
            </div>
        </div>

        <div class="table-container" id="results-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Categorie</th>
                        <th>Durée</th>
                        <th>Tuteur</th>
                        <th>Date</th>
                        <th>Lieu</th>
                        <th>Description</th>
                        <th>Statut</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for activite in activites %}
                        <tr>
                            <td>{{ activite.nom }}</td>
                            <td>{{ activite.categorie }}</td>
                            <td>{{ activite.duree }}</td>
                            <td>{{ activite.nomDuTuteur }}</td>
                            <td>{{ activite.dateActivite|date('d/m/Y') }}</td>
                            <td>{{ activite.lieu }}</td>
                            <td>{{ activite.description }}</td>
                            <td>{{ activite.statut }}</td>
                            <td class="actions">
                                <a href="{{ path('app_activite_show', {'id': activite.id}) }}" class="btn-action btn-show">View</a>
                                <a href="{{ path('app_activite_edit', {'id': activite.id}) }}" class="btn-action btn-edit">Edit</a>
                                <a href="{{ path('app_participant_by_activite', {'id': activite.id}) }}" class="btn-action btn-edit">Gérer participants</a>

                                <!-- Delete Button -->
                                <form action="{{ path('app_activite_delete', {'id': activite.id}) }}" method="post" style="display:inline;">
                                    <input type="hidden" name="_method" value="DELETE">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ activite.id) }}">
                                    <button type="submit" onclick="return confirm('Are you sure you want to delete this activity?')" class="btn-action btn-danger">Delete</button>
                                </form>
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="9" class="no-records">No records found</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>

        <!-- Chart Section -->
        <div class="chart-container">
            <h3>Répartition des Activités par Statut</h3>
            <canvas id="statutChart"></canvas>
        </div>

        <a href="{{ path('app_activite_new') }}" class="btn-create">Create New</a>
    </div>

    <!-- Include Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Chart.js Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize chart
            initChart();
            
            // Initialize search functionality
            initSearch();
        });
        
        function initChart() {
            const ctx = document.getElementById('statutChart').getContext('2d');
            const statutCounts = {{ statutCounts|json_encode|raw }};

            // Extract labels and data from statutCounts
            const labels = Object.keys(statutCounts);
            const data = Object.values(statutCounts);

            // Define colors matching the theme
            const backgroundColors = [
                '#c29c6e', // Warm gold
                '#9e7b5e', // Darker brown
                '#6f4f28', // Deep brown
                '#b7472a', // Red-brown
                '#7b9f6f'  // Olive green-brown
            ];

            // Create chart instance
            window.activiteChart = new Chart(ctx, {
                type: 'pie', // Pie chart for a full circle
                data: {
                    labels: labels,
                    datasets: [{
                        data: data,
                        backgroundColor: backgroundColors,
                        borderColor: '#f2e3d5', // Light tan border
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    size: 12, // Taille de police réduite
                                    family: 'Arial'
                                },
                                color: '#3e2a47' // Dark brown text
                            }
                        },
                        title: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const label = context.label || '';
                                    const value = context.raw || 0;
                                    const total = context.chart.data.datasets[0].data.reduce((a, b) => a + b, 0);
                                    const percentage = Math.round((value / total) * 100);
                                    return `${label}: ${value} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }
        
        function initSearch() {
            const searchInput = document.getElementById('search-input');
            const searchButton = document.getElementById('search-button');
            const sortSelect = document.getElementById('sort');
            const resultsContainer = document.getElementById('results-container');
            
            // Setup debounce for search
            let searchTimeout;
            
            // Function to perform search
            function performSearch() {
                const searchQuery = searchInput.value.trim();
                const sortParam = sortSelect.value;
                
                // Show loading indicator
                resultsContainer.innerHTML = '<div class="loading">Recherche en cours...</div>';
                
                // Prepare URL with parameters
                const url = new URL('{{ path('app_activite_index') }}', window.location.origin);
                if (searchQuery) {
                    url.searchParams.append('search', searchQuery);
                }
                if (sortParam) {
                    url.searchParams.append('sort', sortParam);
                }
                url.searchParams.append('ajax', 'true');
                
                // Perform AJAX request
                fetch(url.toString(), {
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.text();
                })
                .then(html => {
                    // Update results container with fetched HTML
                    resultsContainer.innerHTML = html;
                    
                    // Update URL for history
                    const stateUrl = new URL(window.location);
                    
                    // Set or remove search param
                    if (searchQuery) {
                        stateUrl.searchParams.set('search', searchQuery);
                    } else {
                        stateUrl.searchParams.delete('search');
                    }
                    
                    // Set or remove sort param
                    if (sortParam) {
                        stateUrl.searchParams.set('sort', sortParam);
                    } else {
                        stateUrl.searchParams.delete('sort');
                    }
                    
                    // Update browser history
                    window.history.pushState({}, '', stateUrl);
                    
                    // Update chart if new data is available
                    updateChartIfNeeded();
                })
                .catch(error => {
                    console.error('Search error:', error);
                    resultsContainer.innerHTML = '<div class="error">Une erreur est survenue lors de la recherche. Veuillez réessayer.</div>';
                });
            }
            
            // Update chart with new data if provided in the AJAX response
            function updateChartIfNeeded() {
                // Check if new chart data is available (this would be set by your controller)
                if (window.newStatutCounts) {
                    const chart = window.activiteChart;
                    if (chart) {
                        const labels = Object.keys(window.newStatutCounts);
                        const data = Object.values(window.newStatutCounts);
                        
                        chart.data.labels = labels;
                        chart.data.datasets[0].data = data;
                        chart.update();
                    }
                }
            }
            
            // Add event listeners
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 500); // 500ms delay for typing
            });
            
            searchButton.addEventListener('click', function() {
                clearTimeout(searchTimeout);
                performSearch();
            });
            
            searchInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    clearTimeout(searchTimeout);
                    performSearch();
                }
            });
            
            sortSelect.addEventListener('change', performSearch);
            
            // Handle browser back/forward navigation
            window.addEventListener('popstate', function() {
                // Get params from URL
                const urlParams = new URLSearchParams(window.location.search);
                const searchParam = urlParams.get('search') || '';
                const sortParam = urlParams.get('sort') || '';
                
                // Update form inputs
                searchInput.value = searchParam;
                sortSelect.value = sortParam;
                
                // Perform search with these params
                performSearch();
            });
            
            // Initialize with current URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            const searchParam = urlParams.get('search') || '';
            const sortParam = urlParams.get('sort') || '';
            
            searchInput.value = searchParam;
            sortSelect.value = sortParam;
            
            // Don't perform initial search if not needed
            if (searchParam || sortParam) {
                performSearch();
            }
        }
    </script>
{% endblock %}